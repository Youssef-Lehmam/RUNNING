"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrField = void 0;
const base_1 = require("../base");
const types_1 = require("../../utils/types");
/**
 * Or/Union field.
 * Union (` | ` in TypeScript) between multiple fields.
 *
 * @example
 * ```ts
 * const schema = fields.or(fields.number(), fields.constant("hello" as const));
 *
 * schema.create(1);
 * schema.create("hello");
 * ```
 */
class OrField extends base_1.FieldModel {
    constructor(...models) {
        super();
        this.models = models;
    }
    validate(value, key = "value") {
        for (const model of this.models) {
            if (model.check(value)) {
                return true;
            }
        }
        throw new TypeError(`'${key}' must be did not satisfy any of the schema`);
    }
    get name() {
        return `OrField<${this.type}>`;
    }
    get type() {
        return `${(0, types_1.joinValues)(this.models.slice(0, 2).map((x) => x.name))}${this.models.length > 2 ? "..." : ""}`;
    }
}
exports.OrField = OrField;
