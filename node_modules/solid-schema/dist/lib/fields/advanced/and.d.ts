import { ObjectField, ObjectFieldModel } from "../standard/object";
/**
 * And field.
 * Combines multiple object fields.
 *
 * @example
 * ```ts
 * const schema = fields.and(fields.object({
 *      a: fields.string(),
 *      b: fields.number(),
 * }));
 *
 * schema.create({
 *      a: "hello",
 *      b: 1
 * });
 * ```
 */
export declare class AndField<T extends readonly ObjectField<{}>[]> extends ObjectField<AndFieldType<T>> {
    models: T;
    constructor(...models: T);
    get name(): string;
}
declare type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
declare type AndFieldType_<T extends readonly ObjectField<{}>[]> = UnionToIntersection<{
    [K in keyof T]: T[K] extends ObjectField<infer M> ? M : never;
}[number]>;
export declare type AndFieldType<T extends readonly ObjectField<{}>[]> = AndFieldType_<T> extends ObjectFieldModel ? AndFieldType_<T> : never;
export {};
