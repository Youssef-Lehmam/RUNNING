"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TupleField = void 0;
const base_1 = require("../base");
const types_1 = require("../../utils/types");
/**
 * Tuple field.
 * When creating a value with this schema, all the values must be provided even if it's a optional field.
 *
 * @example
 * ```ts
 * const schema = fields.tuple(fields.constant("hello" as const), fields.number(), fields.boolean());
 *
 * schema.create("hello", 1, true);
 * ```
 */
class TupleField extends base_1.FieldModel {
    constructor(...values) {
        super();
        this.values = values;
    }
    validate(value, key = "value") {
        if (!Array.isArray(value)) {
            throw new TypeError(`'${key}' must be an 'array'`);
        }
        if (value.length !== this.values.length) {
            throw new TypeError(`Length of '${key}' does not match the tuple`);
        }
        for (let i = 0; i < this.values.length; i++) {
            this.values[i].validate(value[i], `Index ${i}`);
        }
        return true;
    }
    get name() {
        return `TupleField<${this.type}>`;
    }
    get type() {
        return `(${(0, types_1.joinValues)((0, types_1.stringifyValues)(this.values.map((x) => x.type)), ", ")})`;
    }
}
exports.TupleField = TupleField;
