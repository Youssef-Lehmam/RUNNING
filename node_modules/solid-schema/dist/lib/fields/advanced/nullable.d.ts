import { FieldModel } from "../base";
/**
 * `disallowNull` and `disallowUndefined` does not affect typings but only will throw error in runtime.
 */
export interface NullableFieldOptions {
    disallowNull?: boolean;
    disallowUndefined?: boolean;
}
/**
 * Optional field.
 * Matches the provided field and additionally allows `null` and `undefined` values.
 *
 * @example
 * ```ts
 * const schema = fields.nullable(fields.string());
 *
 * schema.create("hello");
 * schema.create(null);
 * ```
 */
export declare class NullableField<T> extends FieldModel<T | null | undefined> {
    readonly model: FieldModel<T>;
    readonly options?: NullableFieldOptions | undefined;
    constructor(model: FieldModel<T>, options?: NullableFieldOptions | undefined);
    validate(value: unknown, key?: string): true | never;
    get name(): string;
    get type(): string;
}
