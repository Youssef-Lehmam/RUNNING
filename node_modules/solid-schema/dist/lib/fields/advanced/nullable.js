"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NullableField = void 0;
const base_1 = require("../base");
/**
 * Optional field.
 * Matches the provided field and additionally allows `null` and `undefined` values.
 *
 * @example
 * ```ts
 * const schema = fields.nullable(fields.string());
 *
 * schema.create("hello");
 * schema.create(null);
 * ```
 */
class NullableField extends base_1.FieldModel {
    constructor(model, options) {
        super();
        this.model = model;
        this.options = options;
    }
    validate(value, key = "value") {
        var _a, _b;
        if (value === undefined && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.disallowUndefined) !== true) {
            return true;
        }
        if (value === null && ((_b = this.options) === null || _b === void 0 ? void 0 : _b.disallowNull) !== true) {
            return true;
        }
        return this.model.validate(value, key);
    }
    get name() {
        return `NullableField<${this.type}>`;
    }
    get type() {
        return `${this.model.name} | null | undefined`;
    }
}
exports.NullableField = NullableField;
