import { FieldModel } from "./base";
import { AnyField } from "./standard/any";
import { ArrayField } from "./standard/array";
import { BooleanField } from "./standard/boolean";
import { NumberField } from "./standard/number";
import { ObjectField, ObjectFieldKey, ObjectFieldModel } from "./standard/object";
import { RecordField } from "./standard/record";
import { StringField } from "./standard/string";
import { AndField } from "./advanced/and";
import { OrField } from "./advanced/or";
import { ConstantField } from "./advanced/constant";
import { TupleField } from "./advanced/tuple";
import { NullableField } from "./advanced/nullable";
export * from "./base";
export declare namespace fields {
    const any: () => AnyField;
    const array: <T>(model: FieldModel<T>) => ArrayField<T>;
    const boolean: () => BooleanField;
    const number: () => NumberField;
    const object: <T extends ObjectFieldModel>(model: T) => ObjectField<T>;
    const nullable: <T>(model: FieldModel<T>) => NullableField<T>;
    const record: <T extends ObjectFieldKey, U>(key: FieldModel<T>, value: FieldModel<U>) => RecordField<T, U>;
    const string: () => StringField;
    const or: <T extends readonly FieldModel<unknown>[]>(...models: T) => OrField<[...T]>;
    const and: <T extends readonly ObjectField<{}>[]>(...models: T) => AndField<[...T]>;
    const constant: <T extends unknown>(value: T) => ConstantField<T>;
    const tuple: <T extends readonly FieldModel<unknown>[]>(...values: T) => TupleField<[...T]>;
}
