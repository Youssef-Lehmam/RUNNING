"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectField = void 0;
const base_1 = require("../base");
const nullable_1 = require("../advanced/nullable");
/**
 * Object field.
 *
 * @example
 * ```ts
 * const schema = fields.object({
 *      a: fields.number()
 * });
 *
 * schema.create({
 *      a: 1
 * });
 * ```
 */
class ObjectField extends base_1.FieldModel {
    constructor(model) {
        super();
        this.model = model;
    }
    validate(value, key = "value") {
        if (typeof value !== "object" ||
            Array.isArray(value) ||
            value === null) {
            throw new TypeError(`'${key}' must be an 'object'`);
        }
        const modelKeys = Object.keys(this.model);
        const valueKeys = Object.keys(value);
        modelKeys.forEach((k) => {
            if (!valueKeys.includes(k) &&
                !(this.model[k] instanceof nullable_1.NullableField)) {
                throw new RangeError(`'${key}' has a missing key '${k}'`);
            }
        });
        valueKeys.forEach((k) => {
            if (!modelKeys.includes(k)) {
                throw new RangeError(`'${key}' contains an unknown key '${k}'`);
            }
            this.model[k].validate(value[k], `${key}.${k}`);
        });
        return true;
    }
    get name() {
        return `ObjectField<${this.type}>`;
    }
    get type() {
        return `{\n${Object.entries(this.model)
            .map(([k, v]) => `  ${k}: ${v.name};`)
            .join("\n")}\n}`;
    }
}
exports.ObjectField = ObjectField;
