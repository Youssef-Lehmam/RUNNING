"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RecordField = void 0;
const base_1 = require("../base");
/**
 * Record field.
 * Equivalent of `Record<K, V>` in TypeScript.
 *
 * @example
 * ```ts
 * const schema = fields.record(fields.string(), fields.number());
 *
 * schema.create({
 *      a: 2,
 *      b: 1
 * });
 * ```
 */
class RecordField extends base_1.FieldModel {
    constructor(key, value) {
        super();
        this.key = key;
        this.value = value;
    }
    validate(value, key = "value") {
        if (typeof value !== "object" ||
            Array.isArray(value) ||
            value === null) {
            throw new TypeError(`'${key}' must be an 'object'`);
        }
        Object.entries(value).forEach(([k, v]) => {
            this.key.validate(k);
            this.value.validate(v);
        });
        return true;
    }
    get name() {
        return `RecordField<${this.key.name}, ${this.value.name}>`;
    }
    get type() {
        return `{\n  ${this.key.type}: ${this.value.type};\n}`;
    }
}
exports.RecordField = RecordField;
